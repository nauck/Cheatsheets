docker --help

// enable on boot, start and stop
# systemctl --user enable docker-desktop
# systemctl --user start docker-desktop
# systemctl --user stop docker-desktop

// run container
$ docker run -i -t fedora
-t: allocate a pseudo tty
-i: keep STDIN open even if not attached

// run in detached mode
$ docker run -d jpetazzo/clock
OR
$ docker run -d --name jesse jpetazzo/clock

// list containers (gives container id)
$ docker ps

// stopping containers
// gracefully (10s)
$ docker stop <containerid>
//forcefully
$ docker kill <containerid>

// follow the logs
$ docker logs -f --tail 3 <containerid>

BUILDING USING Docker file
// create a docker file
FROM fedora:latest
RUN yum install -y figlet
ENTRYPOINT [ "figlet" ]
CMD [ "hello world" ]

ENTRYPOINT -> any command line argument you pass while running docker
CMD -> automatically run some commands

$ docker build .
$ docker run figlet hi
$ docker figlet

//More example of Dockerfile
  FROM python:3.9-slim
  WORKDIR /app
  // copy requirements to /app directory
  COPY requirements.txt
  RUN pip install -r requirements.txt
  // copy files from source to destination
  COPY . .
  EXPOSE 5000
  CMD ["python3", "-m", "flask", "run", "--host=0.0.0.0"]

// cleanup
docker images -a 
docker image prune
docker container prune
$ docker run -d -p 5000:5000 <container>

// set env variables
$ docker run -d -p 5000:5000-e .env --name rockandroll container
$ docker logs containerid
$ docker logs -n containerid
$ docker logs -f containerid

// running database
docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d -p 5432:5432 postgres

// bind mounts - lets local file mounts onto container directory
// docker compose - github awesome-compose
services:
  web:
    build: flask
    ports:
      -'5000:5000'
    environment:
      FLASK_ENV: development
    volumes:
      -./flask:/app
    volumes:
      -./flask:/app

